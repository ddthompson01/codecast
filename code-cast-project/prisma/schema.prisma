// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  imageUrl       String   @db.Text
  externalUserId String   @unique
  bio            String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  stream         Stream?
  following      Follow[] @relation("Following") // A user can follow many users
  followers      Follow[] @relation("FollowedBy") // A user can be followed by many users
  blocking       Block[] @relation("Blocking") // A user can block many users
  blockers       Block[] @relation("BlockedBy") // A user can be blocked by many users
}

model Stream {
  id            String    @id @default(uuid())
  name          String    @unique
  thumbnailUrl  String?   @db.Text
  categoryId    String?
  subcategory   String?
  isLive        Boolean   @default(false)
  isChatEnabled Boolean   @default(true)
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category? @relation(fields: [categoryId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@fulltext([name])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  streams     Stream[]
}

model Follow {
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}